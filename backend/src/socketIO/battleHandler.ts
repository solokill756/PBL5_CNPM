// import dotenv from "dotenv";
// import jwt from "jsonwebtoken";
// import gameService from "../services/gameService";
// import { NextFunction } from "express";
// import { UserPayload } from "../services/authService";
// dotenv.config();
// export default (io: any, gameRooms: any, wattingPlayers: any) => {
//   // Middleware x√°c th·ª±c
//   io.use((socket: any, next: NextFunction) => {
//     const token = socket.handshake.auth.token;
//     if (token) {
//       try {
//         const decoded = jwt.verify(
//           token,
//           process.env.ACCESS_TOKEN_SECRET as string
//         ) as UserPayload;
//         socket.user_id = decoded.user_id;
//         socket.username = decoded.username;
//         console.log(`‚úÖ User ${socket.username} authenticated`);
//         next();
//       } catch (err) {
//         console.log("‚ùå Authentication failed:", err.message);
//         next(new Error("Authentication error"));
//       }
//     } else {
//       next(new Error("No token provided"));
//     }
//   });
//   // X·ª≠ l√Ω k·∫øt n·ªëi m·ªõi
//   io.on("connection", (socket: any) => {
//     console.log(`üîå User ${socket.username} connected (ID: ${socket.id})`);
//     // Tham gia h√†ng ƒë·ª£i t√¨m tr·∫≠n
//     socket.on("join_queue", async (data: any) => {
//       console.log(
//         `üéØ ${socket.username} joined queue for topic: ${data.topic}`
//       );

//       const player = {
//         id: socket.id,
//         user_id: socket.user_id,
//         username: socket.username,
//         topic: data.topic || "general",
//       };
//       // T√¨m ƒë·ªëi th·ªß c√πng topic
//       // const opponentIndex = waitingPlayers.findIndex(
//       //   (p) => p.topic === player.topic
//       // );
//       const opponentIndex =
//         Math.random() * wattingPlayers.length < 0.5 ? -1 : 0; // Gi·∫£ l·∫≠p t√¨m ƒë·ªëi th·ªß

//       if (opponentIndex !== -1) {
//         const opponent = wattingPlayers[opponentIndex];
//         wattingPlayers.splice(opponentIndex, 1); // X√≥a ƒë·ªëi th·ªß kh·ªèi h√†ng ƒë·ª£i

//         // T·∫°o ph√≤ng ƒë·∫•u
//         const roomId = `room_${Date.now()}_${Math.random()
//           .toString(36)
//           .substr(2, 9)}`;

//         try {
//           // L·∫•y c√¢u h·ªèi t·ª´ database
//           const questions = await gameService.getRandomQuestion();

//           if (questions.length === 0) {
//             socket.emit("error", {
//               message: "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi cho ch·ªß ƒë·ªÅ n√†y",
//             });
//             return;
//           }

//           const gameRoom = {
//             id: roomId,
//             players: [opponent, player],
//             questions: questions,
//             currentQuestion: 0,
//             scores: {
//               [opponent.user_id]: 0,
//               [player.user_id]: 0,
//             },
//             status: "waiting",
//             topic: player.topic,
//             answers: {},
//             questionStartTime: null,
//           };

//           gameRooms.set(roomId, gameRoom);

//           // Join socket rooms
//           const opponentSocket = io.sockets.sockets.get(opponent.id);
//           if (opponentSocket) {
//             opponentSocket.join(roomId);
//           }
//           socket.join(roomId);

//           console.log(`üéÆ Game room created: ${roomId}`);
//           console.log(`üë• Players: ${opponent.username} vs ${player.username}`);

//           // Th√¥ng b√°o cho c·∫£ 2 ng∆∞·ªùi ch∆°i
//           io.to(roomId).emit("game_found", {
//             roomId,
//             opponent: {
//               username: opponent.username,
//               user_id: opponent.user_id,
//             },
//             player: {
//               username: player.username,
//               user_id: player.user_id,
//             },
//             totalQuestions: questions.length,
//             topic: player.topic,
//           });
//         } catch (error) {
//           console.error("‚ùå Error creating game room:", error);
//           socket.emit("error", { message: "L·ªói khi t·∫°o ph√≤ng ƒë·∫•u" });
//         }
//       } else {
//         // Kh√¥ng t√¨m th·∫•y ƒë·ªëi th·ªß, th√™m v√†o h√†ng ƒë·ª£i
//         wattingPlayers.push(player);
//         socket.emit("queue_joined", {
//           position: wattingPlayers.length,
//           topic: player.topic,
//         });
//         console.log(
//           `‚è≥ ${socket.username} waiting in queue. Position: ${wattingPlayers.length}`
//         );
//       }
//     });
//     // S·∫µn s√†ng b·∫Øt ƒë·∫ßu game
//     socket.on("ready_to_start", (data: any) => {
//       const gameRoom = gameRooms.get(data.roomId);
//       if (!gameRoom) {
//         socket.emit("error", { message: "Kh√¥ng t√¨m th·∫•y ph√≤ng ƒë·∫•u" });
//         return;
//       }

//       console.log(`üöÄ Starting game in room ${data.roomId}`);

//       gameRoom.status = "playing";
//       gameRoom.questionStartTime = Date.now();

//       // G·ª≠i c√¢u h·ªèi ƒë·∫ßu ti√™n
//       io.to(data.roomId).emit("game_started", {
//         question: gameRoom.questions[0],
//         questionNumber: 1,
//         totalQuestions: gameRoom.questions.length,
//       });

//       // ƒê·∫∑t timer cho c√¢u h·ªèi (10 gi√¢y)
//       setTimeout(() => {
//         handleQuestionTimeout(data.roomId);
//       }, 10000);
//     });
//     socket.on("submit_answer", (data: any) => {
//       const gameRoom = gameRooms.get(data.roomId);
//       if (!gameRoom || gameRoom.status !== "playing") return;

//       const currentQ = gameRoom.questions[gameRoom.currentQuestion];
//       const isCorrect = data.answer === currentQ.correct_answer;
//       const responseTime = Date.now() - gameRoom.questionStartTime;
//       console.log(
//         `üí° ${socket.username} answered ${data.answer} (${
//           isCorrect ? "correct" : "wrong"
//         }) in ${responseTime}ms`
//       );

//       // T√≠nh ƒëi·ªÉm
//       let points = 0;
//       if (isCorrect) {
//         points = 20; // ƒêi·ªÉm c∆° b·∫£n
//         if (responseTime < 5000) points += 5; // Bonus tr·∫£ l·ªùi nhanh
//       }

//       gameRoom.scores[socket.user_id] += points;
//       gameRoom.answers[socket.user_id] = {
//         answer: data.answer,
//         isCorrect,
//         points,
//         responseTime,
//       };

//       // Ki·ªÉm tra xem c·∫£ 2 ƒë√£ tr·∫£ l·ªùi ch∆∞a
//       const answeredCount = Object.keys(gameRoom.answers).length;
//       console.log(`üìä Answered: ${answeredCount}/2 players`);

      if (answeredCount === 2) {
        handleQuestionComplete(data.roomId);
      }
    });

    // R·ªùi kh·ªèi h√†ng ƒë·ª£i
    socket.on("leave_queue", () => {
      const playerIndex = wattingPlayers.findIndex(
        (p: any) => p.user_id === socket.user_id
      );
      if (playerIndex !== -1) {
        wattingPlayers.splice(playerIndex, 1);
        console.log(`üö™ ${socket.username} left queue`);
      }
    });

    // X·ª≠ l√Ω disconnect
    socket.on("disconnect", () => {
      console.log(`üîå ${socket.username} disconnected`);

      // X√≥a kh·ªèi h√†ng ƒë·ª£i
      const playerIndex = wattingPlayers.findIndex(
        (p: any) => p.user_id === socket.user_id
      );
      if (playerIndex !== -1) {
        wattingPlayers.splice(playerIndex, 1);
      }

      // X·ª≠ l√Ω disconnect trong game
      handlePlayerDisconnect(socket);
    });

    const handleQuestionComplete = (roomId: string) => {
      const gameRoom = gameRooms.get(roomId);
      if (!gameRoom) return;

      const currentQ = gameRoom.questions[gameRoom.currentQuestion];

      console.log(
        `üìã Question ${
          gameRoom.currentQuestion + 1
        } completed in room ${roomId}`
      );

      // G·ª≠i k·∫øt qu·∫£ c√¢u h·ªèi
      io.to(roomId).emit("question_result", {
        question: currentQ,
        answers: gameRoom.answers,
        scores: gameRoom.scores,
        correctAnswer: currentQ.correct_answer,
      });

      // Reset cho c√¢u ti·∫øp theo
      gameRoom.answers = {};
      gameRoom.currentQuestion++;

      // Ki·ªÉm tra xem c√≤n c√¢u h·ªèi kh√¥ng
      if (gameRoom.currentQuestion < gameRoom.questions.length) {
        // Ti·∫øp t·ª•c c√¢u ti·∫øp theo sau 3 gi√¢y
        setTimeout(() => {
          gameRoom.questionStartTime = Date.now();
          io.to(roomId).emit("next_question", {
            question: gameRoom.questions[gameRoom.currentQuestion],
            questionNumber: gameRoom.currentQuestion + 1,
          });
        }, 3000);
      } else {
        // K·∫øt th√∫c game
        endGame(roomId);
      }
    };

    const endGame = async (roomId: string) => {
      const gameRoom = gameRooms.get(roomId);
      if (!gameRoom) return;

      const players = gameRoom.players;
      const finalScores = gameRoom.scores;

      // X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng (tr·∫£ v·ªÅ user_id)
      const [player1, player2] = players;
      const score1 = finalScores[player1.user_id];
      const score2 = finalScores[player2.user_id];

      let winner: string | null = null;
      if (score1 > score2) {
        winner = player1.user_id;
      } else if (score2 > score1) {
        winner = player2.user_id;
      }
      // N·∫øu h√≤a th√¨ winner = null

      console.log(`üèÅ Game ended in room ${roomId}`);
      console.log(
        `üìä Final scores: ${player1.username}: ${score1}, ${player2.username}: ${score2}`
      );
      console.log(
        `üèÜ Winner: ${
          winner
            ? winner === player1.user_id
              ? player1.username
              : player2.username
            : "Draw"
        }`
      );

      // C·∫≠p nh·∫≠t ƒëi·ªÉm v√†o database
      try {
        for (const player of players) {
          const isWinner = winner && winner === player.user_id;
          const points = finalScores[player.user_id];
          await gameService.updatePlayScore(
            player.user_id,
            points,
            isWinner as boolean
          );
        }
      } catch (error) {
        console.error("‚ùå Error updating scores:", error);
      }

      // G·ª≠i k·∫øt qu·∫£ cu·ªëi game cho t·ª´ng player
      for (const player of gameRoom.players) {
        const opponent = gameRoom.players.find(
          (p: any) => p.user_id !== player.user_id
        );
        io.to(player.id).emit("game_ended", {
          winner,
          finalScores,
          totalQuestions: gameRoom.questions.length,
          isDraw: !winner,
          player: {
            user_id: player.user_id,
            username: player.username,
            profile_picture: player.profile_picture,
            score: finalScores[player.user_id] ?? 0,
          },
          opponent: opponent
            ? {
                user_id: opponent.user_id,
                username: opponent.username,
                profile_picture: opponent.profile_picture,
                score: finalScores[opponent.user_id] ?? 0,
              }
            : null,
        });
      }

      // Cleanup
      setTimeout(() => {
        gameRooms.delete(roomId);
        console.log(`üßπ Cleaned up room ${roomId}`);
      }, 30000); // X√≥a ph√≤ng sau 30 gi√¢y
    };

    function handlePlayerDisconnect(socket: any) {
      // T√¨m game room c·ªßa player
      for (let [roomId, gameRoom] of gameRooms) {
        const playerInRoom = gameRoom.players.find(
          (p: any) => p.user_id === socket.user_id
        );
        if (playerInRoom) {
          console.log(
            `üö™ ${socket.username} disconnected from active game ${roomId}`
          );

          const remainingPlayer = gameRoom.players.find(
            (p: any) => p.user_id !== socket.user_id
          );
          const disconnectedPlayer = gameRoom.players.find(
            (p: any) => p.user_id === socket.user_id
          );

          // Chu·∫©n h√≥a finalScores gi·ªëng endGame
          const finalScores: Record<string, number> = {};
          if (remainingPlayer) {
            finalScores[remainingPlayer.user_id] =
              gameRoom.scores[remainingPlayer.user_id] ?? 0;
          }
          if (disconnectedPlayer) {
            finalScores[disconnectedPlayer.user_id] = 0;
          }

          // Winner ph·∫£i l√† user_id, kh√¥ng ph·∫£i object
          const winner: string | null = remainingPlayer
            ? remainingPlayer.user_id
            : null;

          socket.to(roomId).emit("opponent_disconnected", {
            winner,
            finalScores,
            totalQuestions: gameRoom.questions?.length ?? 0,
            isDraw: false,
            player: remainingPlayer
              ? {
                  user_id: remainingPlayer.user_id,
                  username: remainingPlayer.username,
                  profile_picture: remainingPlayer.profile_picture,
                  score: finalScores[remainingPlayer.user_id] ?? 0,
                }
              : null,
            opponent: disconnectedPlayer
              ? {
                  user_id: disconnectedPlayer.user_id,
                  username: disconnectedPlayer.username,
                  profile_picture: disconnectedPlayer.profile_picture,
                  score: 0,
                }
              : null,
          });

          // Trao chi·∫øn th·∫Øng cho ƒë·ªëi th·ªß
          if (remainingPlayer && gameRoom.status === "playing") {
            gameService
              .updatePlayScore(
                remainingPlayer.user_id,
                gameRoom.scores[remainingPlayer.user_id] ?? 0,
                true
              )
              .catch(console.error);
          }
          gameRooms.delete(roomId);
          break;
        }
      }
    }
  });
};
